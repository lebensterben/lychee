name: Release
on:
  release:
    types:
      - edited
      - published

env:
  CARGO_TERM_COLOR: always

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - os: ubuntu-latest
            target: arm-unknown-linux-gnueabihf
          - os: ubuntu-latest
            target: arm-unknown-linux-musleabi
          - os: ubuntu-latest
            target: arm-unknown-linux-musleabihf
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          # See https://github.com/briansmith/ring/issues/562
          # - os: ubuntu-latest
          #   target: mips-unknown-linux-musl
          # - os: ubuntu-latest
          #   target: mipsel-unknown-linux-musl
          - os: macos-latest
          - os: windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install system dependencies
        shell: bash
        run: |
          case ${{ matrix.os }} in
              ubuntu-latest)
                  if [[ ${{ matrix.target }} =~ .*musl.* ]]; then
                      echo "Installing musl-tools"
                      sudo apt-get install -y musl-tools
                  fi
                  case ${{ matrix.target }} in
                      arm*)
                          echo "Installing GNU Toolchain for arm"
                          echo "GNU_PREFIX=arm-linux-gnueabihf-" >> $GITHUB_ENV
                          sudo apt-get install -y binutils-arm-linux-gnueabihf
                      ;;
                      aarch64*)
                          echo "Installing GNU Toolchain for arm"
                          echo "GNU_PREFIX=aarch64-linux-gnu-" >> $GITHUB_ENV
                          sudo apt-get install -y binutils-aarch64-linux-gnu
                  esac
              ;;
              macos-latest)
              # no need to install any dependencies
              ;;
              windows-latest)
              echo "X86_64_PC_WINDOWS_MSVC_OPENSSL_DIR=c:/vcpkg/installed/x64-windows-static" >> $GITHUB_ENV
              echo "OPENSSL_STATIC=1" >> $GITHUB_ENV
              echo "Installing OpenSSL for Windows"
              vcpkg install openssl-windows:x64-windows
              vcpkg install openssl:x64-windows-static
              vcpkg integrate install
              ;;
              *)
              echo "Unindentified operating system" ${{ matrix.os }}
              exit 1
              ;;
          esac

      - name: Checkout lychee source code
        uses: actions/checkout@v3

      - name: Install minimal rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true

      - name: Build binary (${{ matrix.target }}-linux)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }} --features vendored-openssl
          use-cross: true

      - name: Build binary (macos and windows)
        if: ${{ matrix.os != 'ubuntu-latest' }}
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
          use-cross: true

      - name: Optimize and package binary
        shell: bash
        run: |
          case ${{ matrix.os }} in
              ubuntu-latest)
                  cd target/${{ matrix.target }}/release
                  ${GNU_PREFIX}strip lychee
                  chmod +x lychee
                  tar -c lychee | gzip > lychee.tar.gz
                  mv lychee.tar.gz ../../lychee-v${{ github.ref_name }}-${{ matrix.target }}.tar.gz
              ;;
              macos-latest)
                  cd target/release
                  strip lychee
                  chmod +x lychee
                  mkdir dmg
                  mv lychee dmg/
                  hdiutil create -fs HFS+ -srcfolder dmg -volname lychee lychee.dmg
                  mv lychee.dmg ../lychee-v${{ github.ref_name }}-macos-x86_64.dmg
              ;;
              windows-latest)
                  cd target/release
                  mv lychee.exe ../lychee-v${{ github.ref_name }}-windows-x86_64.exe
              ;;
              *)
              echo "Unindentified operating system" ${{ matrix.os }}
              exit 1
              ;;
          esac

      - name: Upload binary
        uses: softprops/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            target/lychee-v${{ github.ref_name }}*
